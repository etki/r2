plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '2.0.3'
    id 'io.franzbecker.gradle-lombok' version '1.11'
    id 'com.github.lkishalmi.gatling' version '0.7.2'
    id 'io.qameta.allure' version '2.5'
}

group = 'me.etki.tasks'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    dropwizardVersion = '1.3.1'
    jsonProblemVersion = '0.20.2'
    httpClientVersion = '4.5.5'

    allureVersion = '2.6.0'
    junitVersion = '5.1.0'
    retrofitVersion = '2.4.0'
}

repositories {
    mavenCentral()
    jcenter()
}

lombok {
    version = '1.16.20'
    sha256 = ''
}

shadowJar {
    classifier = 'shadow'
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    manifest {
        attributes(
                'Main-Class': 'me.etki.tasks.r2.EntryPoint'
        )
    }
}

allure {
    version = allureVersion
    aspectjweaver = true
    autoconfigure = true

    resultsDir = file('allure/metadata')
    reportDir = file('allure/report')

    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dropwizardVersion
    compile group: 'org.zalando', name: 'problem', version: jsonProblemVersion
    compile group: 'org.zalando', name: 'jackson-datatype-problem', version: jsonProblemVersion
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: httpClientVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testCompile group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion
    testCompile group: 'com.squareup.retrofit2', name: 'converter-jackson', version: retrofitVersion
}

sourceSets {
    acceptanceTest {
        java {
            srcDir 'src/acceptance-test/java'
        }
        resources
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

task acceptanceTest(type: Test) {
    systemProperties System.properties as Map<String, ?>
    useJUnitPlatform()
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}
